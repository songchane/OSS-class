- 마크다운: 텍스트 기반 마크업 언어, 웹보다 빠르게 컨텐츠 작성, 직관적, 깃허브의 README.md 덕분에 각광받기 시작함, html로 변환 가능
제목: # 이후에 한 칸 비우고 사용 (#가장 큼 ~ ######가장 작음)
목록: 순서의 유무에 따라서 다름
이외에 들여쓰기, 수평선, 다양한 글씨 등이 있음

파이참: Jetbrains사에서 제작 및 배포하는 유료/무료 파이썬 IDE
Jetbrains: 체코 회사, 구독 모델을 정착시킨 기업, 한국이 많이 씀,, 오픈 소스 소프트웨어 개발용으로 사용 시 무료

- 가상환경: 격리된 별도의 라이브러리 설치 폴더
원하는 파이썬 환경을 구축하기 위해 필요한 모듈만 담아 놓는 바구니
파이썬의 다른 버전이 필요한 경우 발생

필요성: 하나의 환경에는 여러 버전의 설치 불가해 여러 환경을 만들어 각각의 환경에 여러 버전을 설치
주요목적: 격리된 개발환경 구축

파이썬 가상환경: virtualenv와  conda

- 여러 개의 개발환경이 설치된 경우 어느 개발환경의 PIP를 실행하는지 확인 필요

package installer for python = pip
pip list => 패키지들의 버전을 리스트로 보여줌

명령 프롬프트 path 점검: pip 명령어 실ㄹ해으 여러 개가 있더라도 가장 상단 것이 실행됨
표준 파이썬의 pip 사용: where pip 명령어의 결과에서 주소가 먼저 나오도록 조정
필요 시 path변경: '고급 시스템 설정 보기'에서 path 경로 등록 순서 설정
만약 동일한 이름의 파일이 각기 다른 폴더에 존재하고 모두 path 등록이 된 경우, 먼저 등록된 폴더 안의 파일이 실핼

- python 인터프리터 기본 환경
표준 파이썬: pip, 아나콘다 파이썬: conda pip
- 파이썬 환경에서 패키지 설치 명령어: pip
각각의 환경에서 pip를 실행하면 그 환경에 패키지가 설치

- pip 명령
pip search{키워드}: 키워드로 관련 패키지 검색
pip install{패키지명}: 지정한 패키지 설치
pip uninstall{패키지명}: 지정 패키지 삭제
pip install-upgrade{패키지}: 지정 패키지 업데이트
pip show{패키지}: 지정 패키지의 버전 출력
pip list: 전체 패키지 목록 출력

- 가상환경 도구 설치
venc(불필요), conda(아나콘다 설치), virtualenv(pip install virtualenv), pipenv(pip install pipenv)
- 설치 전 pip 업그레이드: 오류 발생 방지

가상환경 생성 절차
1. 가상환경 생성
2. 생성된 가상환경을 활성화(들어가기): 
3. 활성화된 가상환경 내에서 필요 패키지를 설치, 개발을 진행
4. 현재 활성화된 가상환경을 비활성화(빠져나오기)

가상환경 venv 만들기
1. 폴더 만들고 cmd에서 시작
2. python -m venv num으로 가상환경 생성
3. num\scripts\activate 가상환경 활성화 => where python으로 확인하면 가장 상단에 올라옴을 확인할 수 있음
python -m pip install --upgrade pip => pip 버전을 업그레이드해서 warning을 방지
4. pip install numpy 가상환경에 numpy 설치
5. pip show numpy 설치 확인
6. deactivate로 가상환경에서 나오기 (파일명)이 안보임
